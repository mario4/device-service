/*
 * This source file was generated by the Gradle 'init' task
 */
package devices.network;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;

import devices.model.Device;
import devices.model.DeviceType;
import devices.network.NetworkDeployment.CyclicUplinkReferenceException;
import devices.network.NetworkDeployment.DuplicateDeviceException;

class NetworkDeploymentTest {
    private NetworkDeployment network = new NetworkDeployment();

    @Test
    void should_Not_Accept_Duplicate_Devices() {
        String duplicateMacAddress = "00:01";

        Device switchDevice = new Device(duplicateMacAddress, DeviceType.SWITCH, null);

        Device gateway = new Device(duplicateMacAddress, DeviceType.GATEWAY, null);

        network.registerDevice(switchDevice);

        Assertions.assertThatThrownBy(() -> network.registerDevice(gateway))
                .isInstanceOf(DuplicateDeviceException.class);
        Assertions.assertThatIterable(network.getRegisteredDevices())
                .containsExactly(switchDevice);
    }

    @Test
    void can_Register_Device_To_Network() {
        assertEquals(null, network.getRegisteredDevice("00:01"));

        Device device = aSwitch("00:01", null);
        network.registerDevice(device);

        assertEquals(device, network.getRegisteredDevice("00:01"));
    }

    @Test
    void can_List_Devices_OnNetwork_Sorted_By_Type() {
        Device switchOne = aSwitch("00:01", null);
        Device gateway = aGateway("00:02", null);
        Device switchTwo = aSwitch("00:03", null);
        Device accessPoint = anAccesspoint("00:04", null);

        registerDevices(switchOne, gateway, switchTwo, accessPoint);

        Assertions.assertThatIterable(network.getRegisteredDevices())
                .containsExactly(gateway, switchOne, switchTwo,
                        accessPoint);
    }

    @Test
    void can_Add_Connected_Devices_In_Network() {
        Device switchOne = aSwitch("00:01", null);
        Device gateway = aGateway("00:02", "00:01");
        Device switchTwo = aSwitch("00:03", "00:01");
        Device accessPoint = anAccesspoint("00:04", "00:01");

        registerDevices(switchOne, gateway, switchTwo, accessPoint);

        Assertions.assertThatIterable(switchOne.getConnectedDevices())
                .contains(gateway, switchTwo, accessPoint);

        Device gatewayTwo = aGateway("00:05", "00:03");

        registerDevices(gatewayTwo);

        Assertions.assertThatIterable(switchTwo.getConnectedDevices())
                .containsExactly(gatewayTwo);
    }

    @Test
    void can_Add_Connected_Devices_Out_Of_Order() {
        Device switchOne = aSwitch("00:01", null);
        Device gateway = aGateway("00:02", "00:01");
        Device switchTwo = aSwitch("00:03", "00:01");
        Device accessPoint = anAccesspoint("00:04", "00:01");

        registerDevices(gateway, switchTwo, accessPoint, switchOne);

        Assertions.assertThatIterable(switchOne.getConnectedDevices())
                .contains(gateway, switchTwo, accessPoint);
    }

    @Test
    void can_Not_Establish_Cyclic_Connections() {
        network.registerDevice(new Device("00:01", DeviceType.GATEWAY, null));
        network.registerDevice(new Device("00:02", DeviceType.SWITCH, null));
        network.registerDevice(new Device("00:03", DeviceType.ACCESS_POINT, "00:04"));

        Assertions.assertThatThrownBy(() -> network.registerDevice(new Device("00:04", DeviceType.GATEWAY, "00:03")))
                .isInstanceOf(CyclicUplinkReferenceException.class);

        Assertions.assertThat(network.getRegisteredDevice("00:04")).isNull();
        
        Assertions.assertThatThrownBy(() -> network.registerDevice(aGateway("00", "00")))
                .isInstanceOf(CyclicUplinkReferenceException.class);
    }

    @Test
    void should_Be_Empty_Before_Device_Registrations(){

        Assertions.assertThat(network.getRegisteredDevices()).isEmpty();
        Assertions.assertThat(network.getTopology().getConnectedDevices()).isEmpty();
    }

    private void registerDevices(Device... devices) {
        for (int i = 0; i < devices.length; i++) {
            network.registerDevice(devices[i]);
        }
    }

    private Device aGateway(String macAddress, String uplinkAddress) {
        return new Device(macAddress, DeviceType.GATEWAY, uplinkAddress);
    }

    private Device aSwitch(String macAddress, String uplinkAddress) {
        return new Device(macAddress, DeviceType.SWITCH, uplinkAddress);
    }

    private Device anAccesspoint(String macAddress, String uplinkAddress) {
        return new Device(macAddress, DeviceType.ACCESS_POINT, uplinkAddress);
    }
}
